#!/bin/bash

# This script can start and stop the three main components of the L2 system:
# the client, convert, and manager scripts.  It tracks the PGIDs of these
# processes in the file $PGID.  When starting, it also ensures that the
# necessary files and directory structures are present, and, if not, constructs
# them.

# Do not delete this weird line
# It sets the option which assigns new pgid's to backgrounded pipelines

# 2019 update to remove L2 output and disentangle from pushnlug

set -m

# Organization of locations.  Set directory structure here:
BS=$HOME/BufferScripts                  # Path to the BufferScripts repository
FILESYSTEM=/raid                        # Buffer filesystem
L1=$FILESYSTEM/data/l1                  # Directory for raw data
LOGDIR=$BS/log                          # Central location for L2 log files
DATA=$FILESYSTEM/data/l1                # normal data directory
CHOPPER=$HOME/stonehenge/stonehenge.sh  # Location of Stonehenge program
REDISHOST=192.168.80.128                # Location of monitoring redis db
#----------------------------------------------------------
# Below this line we specify the relative paths to different components of
# the L2 system.  This should not need to be edited to reflect local installations.
SERVERFL=$BS/buffer/served.txt
SERVERLS=$BS/buffer/ls.txt
CLIENT=$BS/buffer/client
STONELOG=$LOGDIR/stone.log
CLIENTLOG=$LOGDIR/client.log
PGIDFILE=$BS/pgid.txt
MONITOR=$BS/monitor.py
#-----------------------------------------------------------

# Prints the help text
printhelp() {
  echo -e 'This is the L2 Trigger Master Script.'
  echo -e 'It takes the following arguments:'
  echo -e '-a \t \t Start all scripts'
  echo -e '-k \t \t Stop all scripts'
  echo -e '-s [string] \t Start script [string]'
  echo -e '-z [string] \t Stop script [string]'
  echo -e '-h \t \t Print this help text'
}

# This function parses the PGID file
parsepgid(){
  if [ ! -f $PGIDFILE ]
  then
    clientpgid=0
    convertpgid=0
    managerpgid=0
  else
    count=0
    while read -r line
    do
      let count++
      case "$count" in
        1)
          clientpgid=$line
          ;;
        2)
          convertpgid=$line
          ;;
        3)
          managerpgid=$line
          ;;
        *)
          echo Invalid PGID file!
          exit 1
          ;;
       esac
    done < $PGIDFILE
  fi
}

# This function updates the PGID file
# Should only be called if parsepgid has already been called
writepgid(){
  echo -e $clientpgid '\n'$convertpgid '\n'$managerpgid > $PGIDFILE
}

# This function starts individual scripts
# If script already running, prints message
startprocess(){
  parsepgid
  case "$1" in
    "client")
      if [ "$clientpgid" -eq 0 ]
      then
        $CLIENT $L1 $STONELOG $CHOPPER \
        $DATA $SERVERFL $SERVERLS $REDISHOST \
        2>> $CLIENTLOG | python $MONITOR L2-client >> $CLIENTLOG 2>&1 &
        clientpgid=$(jobs -lp | tail -n 1)
      else
        echo Client process was already running.
      fi
      ;;
    *)
      echo -e 'Invalid process name passed\n'
      echo -e 'Valid options are client, convert, manager\n'
      exit 1
      ;;
  esac
  writepgid
}

# This function kills individual scripts and their decendents
# If the script is not running, prints message.
stopprocess(){
  parsepgid
  case "$1" in
  "client")
    if [ $clientpgid -ne 0 ]
    then
      kill -- -$clientpgid
      clientpgid=0
    else
      echo Client process was not running.
    fi
    ;;
  *)
    echo -e 'Invalid process name passed.\n'
    echo -e 'Valid options are client, convert, and manager.\n'
    exit 1
    ;;
  esac
  writepgid
}

# MAIN
if [[ $# -eq 0 ]]
then
  printhelp
fi

while getopts "h?aks:z:" opt
do
  case "$opt" in
  h)
    printhelp
    exit 0
    ;;
  a)
    start_all
    exit 0
    ;;
  k)
    stop_all
    exit 0
    ;;
  s)
    name=$OPTARG
    startprocess $name
    ;;
  z)
    name=$OPTARG
    stopprocess $name
    ;;
  *)
    echo -e 'Invalid argument\n'
    ;;
  esac
done
