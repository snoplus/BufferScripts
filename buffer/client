#!/bin/bash

# This client script identifies the next builder file to process and
# (1) writes it out to the Buffer and (2) feeds it to Stonehenge.
# When Stonehenge runs to completion, it touches the the file filereceived,
# filetryagain, or filefailed, depending on how it has exited.  This triggers
# this script to move on to the next file (or try again as appropriate).

# This script is designed for use with the L2 Master Script.  It can be run
# independently by giving it the arguments listed below:

# 2019 update to remove L2 and disentangle from pushnlug

# Specifying where things are located
L1=$1
LOG=$2
CHOPPER=$3
SERVERDIR=~/BufferScripts/buffer
DATA=$4
FL=$5
LS=$6
REDISHOST=$7

# This function is a wrapper for Stonehenge, which will send the appropriate
# signals to the server
chopper()
{
$CHOPPER -i /dev/stdin -o $NAME -r -c $CONFIGFILE -s $TRIES -b burst >> $LOG
STONEHENGERETURN=$?
if [ $STONEHENGERETURN -eq 0 ]
then
  echo SUCCESS - Stonehenge finished processing file $FILE successfully.
  touch $SERVERDIR/filereceived
else
  echo WARNING - Stonehenge exited on file $FILE.
  if [ $TRIES -lt 2 ]
  then
    echo INFO - Trying to read file $FILE again.
    touch $SERVERDIR/filetryagain
  else
    echo ERROR - Three failured trying to process file $FILE.  Moving on.
    touch $SERVERDIR/filefailed
  fi
fi
}

# This function updates the text files holding the lists of files available
# on the builder, and the list of files we have already processed.
updatefilelists()
{
# Get the list of files needing processing
ls $DATA/SNOP*.zdab > temp.txt
sort temp.txt > $LS
rm temp.txt

# If there is no $FL file, assume we want to start from present
if [ ! -f $FL ]
then
  cp $LS $FL
fi

# Drop files from $FL no longer in $LS
comm -12 $LS $FL > temp.txt
sort temp.txt > $FL
rm temp.txt
}

# MAIN - Control flow begins here
echo SUCCESS - L2 Client starting
TRIES=0
OLDRUN=0
while true
do
    DONE=0
    # First get appropriate file
    #////////////////////////////
    updatefilelists

# Find next file to process
# Check for test data only if there is no real data available
    COUNT=0
    TEST=0
    while [ $(comm -23 $LS $FL | wc -l) -lt 1 ]
    do
      sleep 1
      let COUNT++
      if [ $(( COUNT % 60 )) -eq 0 ]
      then
        echo INFO - Waiting for data
      fi
      updatefilelists
    done
    if [ $TEST -eq 0 ]
    then
      FILE=$(ls -t $(comm -23 $LS $FL) | tail -n 1)
    fi

# Prepare to process file
# TODO - Check different cases for parsing filename:
#        SNOP, default
#//////////////////////////
    echo INFO - Receiving file $FILE
    RUN=$( echo $FILE | awk 'BEGIN {FS="_"}{print $2}' )
    SUBRUN2=$( echo $FILE | awk 'BEGIN {FS="_"}{print $3}' )
    SUBRUN=$( echo $SUBRUN2 | awk 'BEGIN {FS="."}{print $1}' )
    BIGFILE=$( echo $FILE | awk 'BEGIN {FS="/"}{print $5}' )
    NAME=$RUN"_"$SUBRUN
    if [ $TEST -eq 1 ]
    then
      NAME=test$NAME
    fi

# Identify the run type and select the appropriate configuration file
# Until we write the runtype program, it is commented out
#//////////////////////////
    if [ $RUN -ne $OLDRUN ]
    then
      OLDRUN=$RUN
#     CONFIGFILE=$(runtype $RUN)
      CONFIGFILE=~/stonehenge/default.cnfg
    fi

# Receive file - try three times, report errors
    FILESTOPROCESS=$(comm -23 $LS $FL)
    if [ $FILESTOPROCESS -gt 1 ]
    then
      tail -c +1 $FILE | chopper &
    else
      tail -f -c +1 $FILE | chopper &
    fi
    PID=$( jobs -lp | tail -n 1)
    redis-cli -h $REDISHOST ZADD l2:process $(date +%s) $BIGFILE
    while [ ! -f $SERVERDIR/filereceived ] && [ ! -f $SERVERDIR/filetryagain ] && [ ! -f $SERVERDIR/filefailed ] && [ ! -f $SERVERDIR/fileended ]
    do
# Check whether we need to move on
      FILESTOPROCESS=$(comm -23 $LS $FL)
      if [ $FILESTOPROCESS -gt 1 ]
      then
        WAITTIME=$($(date +%s) - $(date +%s -r /raid/data/l1/SNOP_$NAME.zdab))
        if [ $WAITTIME -gt 60 ]
        then
          touch $SERVERDIR/fileended
        fi
#      fi
      sleep 1
    done
    if [ -f $SERVERDIR/filereceived ]
    then
      echo DEBUG - filereceived
      rm $SERVERDIR/filereceived
      kill $PID
      echo INFO - Reached end of $FILE
      echo $FILE >> $FL
      TRIES=0
      DONE=1
    elif [ -f $SERVERDIR/filetryagain ]
    then
      rm $SERVERDIR/filetryagain
      kill $PID
      echo INFO - Server will retry reading file $FILE
      let TRIES++
    elif [ -f $SERVERDIR/filefailed ]
    then
      rm $SERVERDIR/filefailed
      kill $PID
      echo INFO - Server will not try to read file $FILE again.
      echo $FILE >> $FL
      let TRIES++
    elif [ -f $SERVERDIR/fileended ]
    then
      rm $SERVERDIR/fileended
      kill $PID
      echo INFO - File ended unexpectedly
    else
      echo DEBUG - Message file disappeared
    fi

# If file successfully received, end
    if [ $DONE -eq 1 ]
    then
      echo SUCCESS - Stonehenge done with run $NAME
      redis-cli -h $REDISHOST ZREM l2:process $BIGFILE
      redis-cli -h $REDISHOST ZADD l2:wait $(date +%s) $BIGFILE
    else
      if [ ! $TRIES -lt 3 ]
      then
        echo ERROR - Stonehenge could not process run $NAME
        redis-cli -h $REDISHOST ZREM l2:process $BIGFILE
        redis-cli -h $REDISHOST ZADD l2:fail $(date +%s) $BIGFILE
        TRIES=0
      fi
    fi
done
